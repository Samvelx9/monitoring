version: '3.7'

services:

  # The 'setup' service runs a one-off script which initializes users inside
  # Elasticsearch — such as 'logstash_internal' and 'kibana_system' — with the
  # values of the passwords defined in the '.env' file. It also creates the
  # roles required by some of these users.
  #
  # This task only needs to be performed once, during the *initial* startup of
  # the stack. Any subsequent run will reset the passwords of existing users to
  # the values defined inside the '.env' file, and the built-in roles to their
  # default permissions.
  #
  # By default, it is excluded from the services started by 'docker compose up'
  # due to the non-default profile it belongs to. To run it, either provide the
  # '--profile=setup' CLI flag to Compose commands, or "up" the service by name
  # such as 'docker compose up setup'.
  setup:
    profiles:
      - setup
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./setup/lib.sh:/lib.sh:ro,Z
      - ./setup/roles:/roles:ro,Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
    networks:
      - monitoring
    depends_on:
      - elasticsearch

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: elasticsearch
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - ./elasticsearch/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro,Z
      - /data/elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms${ELASTIC_MEMORY:-1g} -Xmx${ELASTIC_MEMORY:-1g}
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - monitoring
    restart: unless-stopped

  filebeat:
    build:
      context: filebeat/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}

    user: root
    command:
      # Log to stderr.
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/filebeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
    container_name: filebeat
    volumes:
      - ./filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro,Z
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /applogs
        target: /applogs
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    networks:
      - monitoring
    depends_on:
      - elasticsearch
    restart: unless-stopped


  logstash:
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: logstash
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
      - ./logstash/pipeline:/opt/logstash/pipeline
      - ./logstash/patterns:/opt/logstash/patterns
    ports:
      - 5044:5044
      - 5045:5045
      - 5046:5046
    environment:
      LS_JAVA_OPTS: -Xms${LOGSTASH_MEMORY:-512m} -Xmx${LOGSTASH_MEMORY:-512m}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    networks:
      - monitoring
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: kibana
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
      - ./kibana/start-kibana.sh:/usr/share/kibana/start-kibana.sh
    ports:
      - 5601:5601
    environment:
      - ELASTIC_TOKEN
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    command: ["chmod +x /usr/share/kibana/start-kibana.sh && /usr/share/kibana/start-kibana.sh"]
    networks:
      - monitoring
    depends_on:
      - elasticsearch
    restart: unless-stopped

  prometheus:
    build:
      context: prometheus/
    mem_limit: ${PROMETHEUS_MEMORY:-3gb}
    mem_reservation: ${PROMETHEUS_MEMORY:-3gb}
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - /data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-200h}'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    networks:
      - monitoring
    restart: unless-stopped

  grafana:
    build:
      context: grafana/
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/grafana.db:/var/lib/grafana/grafana.db
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - monitoring
    restart: unless-stopped

  elasticsearch_exporter_monitoring:
    image: registry.synisys.com/infrastructure/elasticsearch-exporter:v1.5.0
    container_name: elasticsearch_exporter_monitoring
    command:
     - '--es.uri=http://elasticsearch:9200 --es.all --es.cluster_settings --es.indices --es.data_stream --es.indices_settings --es.indices_mappings --es.shards'
    ports:
    - "9114:9114"
    networks:
      - monitoring    
    restart: unless-stopped


  elasticsearch_exporter_application:
    image: registry.synisys.com/infrastructure/elasticsearch-exporter:v1.5.0
    container_name: elasticsearch_exporter_application
    command:
     - '--es.uri=http://${KUBEMASTER_IP}:${ELASTICSEARCH_NODEPORT} --es.all --es.cluster_settings --es.indices --es.data_stream --es.indices_settings --es.indices_mappings --es.shards'
    ports:
    - "9115:9114"
    networks:
      - monitoring    
    restart: unless-stopped

  node-exporter:
    image: registry.synisys.com/infrastructure/node-exporter:v1.3.1
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - monitoring    
    restart: unless-stopped

  cadvisor:
    image: registry.synisys.com/infrastructure/cadvisor:v0.43.0
    container_name: cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    ports:
      - "8080:8080"
    networks:
      - monitoring    
    restart: unless-stopped

networks:
  monitoring:
    driver: bridge

volumes:
  elasticsearch:
  grafana_data:

